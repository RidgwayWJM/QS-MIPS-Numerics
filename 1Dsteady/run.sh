#!/bin/bash
#Example usage script for steady-state code. This one assumes that we are running the code via submission to the SLURM scheduler
#SBATCH --ntasks=75
#SBATCH --array=0-0

#load relevant c++ module (modify as required)
module load gcc/gcc11

i=$SLURM_ARRAY_TASK_ID

# setup result directory
RESULT_DIR="RESULT${i}/"
mkdir $RESULT_DIR

#input file name
INPUT_FILE="${pwd}input${i}.dat"

#file at which output is redirected
OUT_FILE="${pwd}output${i}.dat"

#restart file (generated by running this script without a restart)
RESTART_FILE="RESULT0/restart8"

#starting value of D'(u*)
D1_p_star=$(bc <<<"-0.5")
Lx=8.0	#domain size in x-coordinate

#generate a new input file  

# output problem parameters to input file 
#**************** Problem Parameters *************************
printf "D2 = 0.4\n" > $INPUT_FILE	#D2=Dc in paper
printf "beta=4.0\n" >> $INPUT_FILE
printf "alpha = 0.5\n" >> $INPUT_FILE
printf "D1_star = 0.5\n" >> $INPUT_FILE	#D1_star = D(u*) in paper
printf "D1_p_star = ${D1_p_star}\n" >>  $INPUT_FILE	#D1_p_star = D'(u*) in paper
printf "D_inf_0 = 0.1\n" >> $INPUT_FILE	#D_inf_0 = D_\infty if D(u) decreasing, and D_inf_0 = D_0 if D(u) increasing
printf "Lu = 6.0\n" >>  $INPUT_FILE	#domain size in u-coordinate
printf "Lx = ${Lx}\n" >>  $INPUT_FILE	#domain size in x-coordinate
	
#**************** kinetic parameters ***********************
printf "a = 0.3\n" >>  $INPUT_FILE
printf "L = 10.0\n" >>  $INPUT_FILE
printf "K = 10.0\n" >>  $INPUT_FILE
printf "lambda = 2.0\n" >>  $INPUT_FILE
printf "m=25.0\n" >>  $INPUT_FILE	#m=\rho_* in paper
printf "epsilon = 4.0e-2\n" >>  $INPUT_FILE

#****************** numerical parameters **********************
printf "Nu_density = 300\n" >>  $INPUT_FILE	#number of elements in u-coordinate for n-mesh
printf "Nu_helm = 1\n" >>  $INPUT_FILE	#number of elements in u-coordinate for c-mesh
printf "Nx = 50\n" >>  $INPUT_FILE	#number of elements in x-coordinate for all meshes
printf "rho_eval = ${Lx}\n" >> $INPUT_FILE	#we evaluate rho(x) at x=0 and x=rho_eval for computing bifurcation diagram

#mpirun ./steady_solve $INPUT_FILE $RESULT_DIR --restart-file $RESTART_FILE > $OUT_FILE #with restart
mpirun ./steady_solve $INPUT_FILE $RESULT_DIR > $OUT_FILE	#without restart




